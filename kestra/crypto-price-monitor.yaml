id: monitor-blockchain-thresholds
namespace: crypto.notifications
tasks:
  - id: process-records
    type: io.kestra.plugin.scripts.python.Script
    env:
      MONGODB_URI: "mongodb+srv://<username>:<password>@cluster.mongodb.net/"
      MAIL_USER: "your-email@example.com"
      MAIL_PASS: "your-email-password"
    beforeCommands:
      - pip install requests pymongo
    inputFiles:
      main.py: |
        import requests
        import smtplib
        from email.mime.text import MIMEText
        from pymongo import MongoClient
        import os
        import time

        # Environment variables
        mongodb_uri = os.getenv("MONGODB_URI")
        mail_user = os.getenv("MAIL_USER")
        mail_pass = os.getenv("MAIL_PASS")

        # MongoDB connection and query
        client = MongoClient(mongodb_uri)
        db = client['blockpulse']
        collection = db['thresholds']
        
        # Fetch records with notifications enabled
        records = collection.find({"notifications": True})

        # Email function
        def send_email(to_email, subject, body):
            try:
                smtp_server = "smtp.gmail.com"
                smtp_port = 587
                sender_email = mail_user

                msg = MIMEText(body)
                msg["Subject"] = subject
                msg["From"] = sender_email
                msg["To"] = to_email

                with smtplib.SMTP(smtp_server, smtp_port) as server:
                    server.starttls()
                    server.login(mail_user, mail_pass)
                    server.sendmail(sender_email, to_email, msg.as_string())
                return True
            except Exception as e:
                print(f"Error sending email: {e}")
                return False

        # Process each record
        for record in records:
            try:
                blockchain_id = record["blockchainId"]
                user_email = record["userEmail"]
                name = record["name"]
                symbol = record["symbol"]
                low_threshold = float(record["lowThreshold"])
                high_threshold = float(record["highThreshold"])

                # Fetch blockchain price
                time.sleep(1)
                response = requests.get(
                    f"https://api.coingecko.com/api/v3/simple/price",
                    params={"ids": blockchain_id, "vs_currencies": "usd"},
                    headers={"accept": "application/json"}
                )

                if response.status_code == 200:
                    data = response.json()
                    if blockchain_id in data:
                        current_price = float(data[blockchain_id]["usd"])

                        if current_price < low_threshold or current_price > high_threshold:
                            threshold_message = "below your low threshold" if current_price < low_threshold else "above your high threshold"
                            subject = f"Crypto Price Alert: {name} ({symbol})"
                            
                            # Build the email body line by line
                            body_lines = [
                                f"Price Alert for {name} ({symbol})!",
                                "",
                                f"Current Price: ${current_price:,.2f} USD",
                                "Your Thresholds:",
                                f"- Low: ${low_threshold:,.2f}",
                                f"- High: ${high_threshold:,.2f}",
                                "",
                                "This alert was triggered because the current price is " + threshold_message + ".",
                                "",
                                "Best regards,",
                                "Your Crypto Monitor"
                            ]
                            
                            # Join the lines with newlines
                            body = "\n".join(body_lines)

                            if send_email(user_email, subject, body):
                                print(f"✅ Alert sent to {user_email} for {name}")
                            else:
                                print(f"❌ Failed to send alert to {user_email} for {name}")
                    else:
                        print(f"No price data found for {blockchain_id}")
                else:
                    print(f"Failed to fetch price for {blockchain_id}: {response.status_code}")

            except Exception as e:
                print(f"Error processing {blockchain_id}: {e}")
                continue

        client.close()
    script: ./bin/python main.py

  - id: log-completion
    type: io.kestra.plugin.core.log.Log
    level: INFO
    message: "Threshold check completed for all records."

triggers:
  - id: schedule
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "*/15 * * * *"